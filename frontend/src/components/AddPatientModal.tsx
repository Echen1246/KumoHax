import React, { useState } from 'react';
import { apiClient } from '../lib/api';

interface AddPatientModalProps {
  isOpen: boolean;
  onClose: () => void;
  onPatientAdded: () => void;
}

export const AddPatientModal: React.FC<AddPatientModalProps> = ({
  isOpen,
  onClose,
  onPatientAdded,
}) => {
  const [formData, setFormData] = useState({
    age: '',
    sex: 'M',
    race: 'White',
    medications: '',
    comorbidities: '',
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.age || !formData.medications) {
      setError('Age and medications are required');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const patientData = {
        patient_id: '', // Will be auto-generated by backend
        age: parseInt(formData.age),
        sex: formData.sex,
        race: formData.race,
        medications: formData.medications.split(',').map(m => m.trim()).filter(m => m),
        comorbidities: formData.comorbidities.split(',').map(c => c.trim()).filter(c => c),
        lab_results: {},
        vital_signs: {},
        study_group: null,
      };

      await apiClient.post('/patients', patientData);
      
      // Reset form
      setFormData({
        age: '',
        sex: 'M',
        race: 'White',
        medications: '',
        comorbidities: '',
      });
      
      onPatientAdded();
      onClose();
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Failed to add patient');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Add New Patient</h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700"
          >
            ✕
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Age *
            </label>
            <input
              type="number"
              min="1"
              max="120"
              value={formData.age}
              onChange={(e) => setFormData({ ...formData, age: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Sex
            </label>
            <select
              value={formData.sex}
              onChange={(e) => setFormData({ ...formData, sex: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="M">Male</option>
              <option value="F">Female</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Race
            </label>
            <select
              value={formData.race}
              onChange={(e) => setFormData({ ...formData, race: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="White">White</option>
              <option value="Black">Black</option>
              <option value="Hispanic">Hispanic</option>
              <option value="Asian">Asian</option>
              <option value="Other">Other</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Medications * <span className="text-gray-500">(comma-separated)</span>
            </label>
            <input
              type="text"
              value={formData.medications}
              onChange={(e) => setFormData({ ...formData, medications: e.target.value })}
              placeholder="e.g., Metformin, Lisinopril"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Comorbidities <span className="text-gray-500">(comma-separated)</span>
            </label>
            <input
              type="text"
              value={formData.comorbidities}
              onChange={(e) => setFormData({ ...formData, comorbidities: e.target.value })}
              placeholder="e.g., Type 2 Diabetes, Hypertension"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          {error && (
            <div className="text-red-600 text-sm">{error}</div>
          )}

          <div className="flex justify-end space-x-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
            >
              {loading ? 'Adding...' : 'Add Patient'}
            </button>
          </div>
        </form>

        <div className="mt-4 text-xs text-gray-500">
          <p>• Patient ID will be auto-generated</p>
          <p>• Risk score will be calculated using Kumo AI</p>
        </div>
      </div>
    </div>
  );
}; 